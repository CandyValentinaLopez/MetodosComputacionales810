{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Galloncito/MetodosComputacionales810/blob/main/MetodosComputacionales810/Students/Gallon_5809\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Actividad: Introducción a Python (sin librerías)\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "ym3QAv5yfZSO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problema 1: Números primos entre 2 y 50 con la Criba de Eratóstenes\n",
        "\n",
        "La **Criba de Eratóstenes** es un método eficiente para encontrar todos los números primos menores que un número dado. El algoritmo consiste en:\n",
        "\n",
        "1. Crear una lista de valores booleanos para representar los números del 2 al 50, todos inicialmente marcados como verdaderos.\n",
        "2. Comenzando desde el primer número primo (2), eliminar todos sus múltiplos (marcándolos como falsos).\n",
        "3. Repetir el proceso para el siguiente número no eliminado.\n",
        "4. Los números que permanezcan marcados como verdaderos son primos.\n",
        "\n",
        "Usando funciones, implementa este método y muestra en pantalla todos los números primos entre 2 y 50.\n",
        "\n"
      ],
      "metadata": {
        "id": "W0C9oNGXfwDj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Aqui va su código\n",
        "def criba(limite):\n",
        "    primos = [True] * (limite + 1)\n",
        "    primos[0] = primos[1] = False  os\n",
        "    for i in range(2, int(limite**0.5) + 1):\n",
        "        if primos[i]:\n",
        "            for i in range(i*i, limite + 1, i):\n",
        "                primos[i] = False\n",
        "    return [i for i, primo in enumerate(primos) if primo]\n",
        "primos50 = criba(50)\n",
        "print(primos50)"
      ],
      "metadata": {
        "id": "GIk3OsqxfZ50",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d3c0e11-393d-476e-9fc1-3c5828675887"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problema 2: Aproximación de π usando la serie de Leibniz\n",
        "\n",
        "La serie de Leibniz es una forma sencilla de aproximar el valor de π:\n",
        "\n",
        "$$\n",
        "\\pi \\approx 4 \\sum_{n=0}^{N} \\frac{(-1)^n}{2n + 1}\n",
        "$$\n",
        "\n",
        "Implementa una función que realice este calculo y muestra la aproximación para distintos valores de $N$ (por ejemplo: 10, 100, 1000, 10000)."
      ],
      "metadata": {
        "id": "WzI-FhIWf2iJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sumafinal(n):\n",
        "  suma = 0\n",
        "  for i in range(n):\n",
        "      suma += 4 * (-1) ** i / (2 * i + 1)\n",
        "  return suma\n",
        "valoresn=[10,100,1000,10000]\n",
        "for n in valoresn:\n",
        "  leibniz=sumafinal(n)\n",
        "  print(f'para {n} su aproximacion a pi es {leibniz}')\n"
      ],
      "metadata": {
        "id": "DfVwDvrRf7Fz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a368286e-73be-4b55-ec65-ae3e1cf39dc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "para 10 su aproximacion a pi es 3.0418396189294032\n",
            "para 100 su aproximacion a pi es 3.1315929035585537\n",
            "para 1000 su aproximacion a pi es 3.140592653839794\n",
            "para 10000 su aproximacion a pi es 3.1414926535900345\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problema 3: Números amigos en un rango dado\n",
        "\n",
        "Dos números naturales $a$ y $b$ se llaman **números amigos** si la suma de los divisores propios (excluyendo el número mismo) de $a$ es igual a $b$, y viceversa.\n",
        "\n",
        "Por ejemplo, 220 y 284 son números amigos porque:\n",
        "- Los divisores propios de 220 son: 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110 → suma: 284\n",
        "- Los divisores propios de 284 son: 1, 2, 4, 71, 142 → suma: 220\n",
        "\n",
        "Escribe un programa que encuentre todos los pares de números amigos en un rango dado por el usuario (por ejemplo, entre 1 y 10000)."
      ],
      "metadata": {
        "id": "Z1-gsRbNf7jy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "31LGyR5Zfg2y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sumaamiga(n):\n",
        "  suma=1\n",
        "  for i in range(2,int(n**0.5)+1):\n",
        "    if n%i==0:\n",
        "      suma+=i\n",
        "      if i*i!=n:\n",
        "        suma+=n//i\n",
        "  return suma\n",
        "def amigos(x,y):\n",
        "  amigo=[]\n",
        "  sumario=[sumaamiga(i) for i in range(y)]\n",
        "  for a in range(x,y):\n",
        "    b=sumario[a]\n",
        "    if b>a and b<=y and sumario[b]==a:\n",
        "      amigo.append((a,b))\n",
        "  return amigo\n",
        "x=1\n",
        "y=10000\n",
        "amigo = amigos(x,y)\n",
        "for a,b in amigo:\n",
        "  print(f'{a},{b}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g0PO3o4wfLeQ",
        "outputId": "141b336b-9eae-41df-dab7-2fef25cd777d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "220,284\n",
            "1184,1210\n",
            "2620,2924\n",
            "5020,5564\n",
            "6232,6368\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## Problema 4: Contador de frecuencias de letras en una palabra\n",
        "\n",
        "Escribe un programa que lea una palabra ingresada por el usuario y construya un diccionario donde cada clave sea una letra de la palabra, y el valor asociado sea la cantidad de veces que esa letra aparece. Imprime el resultado.\n"
      ],
      "metadata": {
        "id": "ASKmJNuBgHIp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Aqui va su código\n",
        "def contadorletra(palabra):\n",
        "    contador = {}\n",
        "    for letra in palabra:\n",
        "        if letra in contador:\n",
        "            contador[letra] += 1\n",
        "        else:\n",
        "            contador[letra] = 1\n",
        "    return contador\n",
        "palabra = input(\"Ingresa una palabra: \")\n",
        "\n",
        "resultado = contadorletra(palabra)\n",
        "print(resultado)"
      ],
      "metadata": {
        "id": "klMGSddPgUQ5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a083e44-17df-4bb8-f4e7-bcef8482689e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa una palabra: sopa\n",
            "{'s': 1, 'o': 1, 'p': 1, 'a': 1}\n"
          ]
        }
      ]
    }
  ]
}